===================================================== YAML Syntax ==========================================================

# Execute command dari Server Controller
- name: Lab Task Failure
  hosts: managed
  vars:
    web_pkg: apache2
    db_pkg: mariadb-server
    db_svc: mariadb

  tasks:
    #    - name: Install {{ web_pkg }} package
      #      apt:
        #        name: "{{ web_pkg }}"
          #        state: present
          #      ignore_errors: yes   ---> Menghilangkan error

        #    - name: Install {{ db_pkg }} package
      #      apt:
        #        name: "{{ db_pkg }}"
          #  state: present
          #      ignore_errors: yes  ---> Menghilangkan error

    - name: Execute the command
      command: hostnamectl
      register: Result
#     changed_when: false

    - name: Print the Command
      debug:
        var: Result.stdout_lines

    - name: Set up webserver
      block:
        - name: Install {{ web_pkg }} package
          apt:
            name: "{{ web_pkg }}"
            state: present
#         failed_when: web_pkg == "apache2"

      rescue:
        - name: Install {{ db_pkg }} package
          apt:
            name: "{{ db_pkg }}"
            state: present
      always:
        - name: Start {{ db_svc }} service
          service:
            name: "{{ db_svc }}"
            state: started

============================================================================================================================

# Install MariaDB dari Server Controller ke Server Pod/Client
required:
- buat folder managing-handlers
- buat file berikut :
  - ansible.cfg
  - dump.sql
  - installing_mariaDB.yml
  - inventory

# Isi ansible.cfg :
[defaults]
inventory=inventory
remote_user=student

[privilege_escalation]
become=True
become_ask_pass=False

# Isi dump.sql :
CREATE TABLE IF NOT EXISTS test (
  message varchar(255) NOT NULL
  ) ENGINE=MyISAM DEFAULT CHARSET=utf8;
  INSERT INTO test(message) VALUES('Adinusa - managing-handlers');
  INSERT INTO test(message) VALUES('ivandhebel');
  INSERT INTO test(message) VALUES('Ansible is fun');

# Isi inventory :
[managed]
pod-ivandhebel-managed1

# Isi installing_MariaDB.yml : ---> ISI TASK/COMMAND PERINTAH INSTALL DATABASE
---
- name: Install mariaDB server
  hosts: managed
  vars:
    required_pkgs:
      - mariadb-server
      - python3-pymysql
    db_user: ivandhebel
    db_pw: adinusa
    db_socket: /var/run/mysqld/mysqld.sock

  tasks:
    - name: "{{ required_pkgs }} packages are installed"
      apt:
        name: "{{ required_pkgs }}"
        state: present
      notify: restart service mariadb

    - name: task that force handlers to run immediately
      meta: flush_handlers

    - name: set mariaDB user and password
      mysql_user:
        login_unix_socket: "{{ db_socket }}"
        login_host: localhost
        login_user: root
        login_password: ''
        name: "{{ db_user }}"
        password: "{{ db_pw }}"
        priv: "*.*:ALL,GRANT"
        state: present
        host: localhost
      no_log: yes
      notify: restart service mariadb

    - name: add a data for database
      copy:
        src: ./dump.sql
        dest: /tmp/dump.sql
      notify:
        - "create database"
        - restart service mariadb

    - name: task that force handlers to run immediately
      meta: flush_handlers

    - name: check if DB exists
      shell: mysql --host=localhost --user={{ db_user }} --password={{ db_pw }} -e 'SHOW DATABASES;'
      register: dbstatus

    - name: show list existed databases
      debug:
        var: dbstatus.stdout_lines

  handlers:
    - name: restart service mariadb
      service:
        name: mariadb
        state: restarted
        enabled: yes

    - name: create a new database
      mysql_db:
        name: testdb
        state: present
        login_unix_socket: "{{ db_socket }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_pw }}"
      listen: "create database"

    - name: insert a data into database
      mysql_db:
        name: testdb
        state: import
        target: /tmp/dump.sql
        login_unix_socket: "{{ db_socket }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_pw }}"
      listen: "create database"

============================================================================================================================




============================================================================================================================



============================================================================================================================



============================================================================================================================








